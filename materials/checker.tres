[gd_resource type="ShaderMaterial" load_steps=19 format=2]

[ext_resource path="res://assets/commons/textures/checker-512.jpg" type="Texture" id=1]
[ext_resource path="res://assets/commons/materials/functions/tilling.gd" type="Script" id=2]
[ext_resource path="res://assets/commons/materials/functions/debug_checker.gd" type="Script" id=3]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "Size"

[sub_resource type="VisualShaderNodeTransformVecMult" id=2]

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id=20]

[sub_resource type="VisualShaderNodeColorConstant" id=21]
constant = Color( 0.5625, 0.0197754, 0.0197754, 1 )

[sub_resource type="VisualShaderNodeCustom" id=7]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorInterp" id=22]

[sub_resource type="VisualShaderNodeCustom" id=33]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformDecompose" id=10]

[sub_resource type="VisualShaderNodeVectorOp" id=12]
operator = 3

[sub_resource type="VisualShader" id=13]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform float Size;


// TileUv

	vec3 tileUV(vec3 uv, float xaxis, float yaxis, float zaxis) {
		return vec3(uv.x * xaxis, uv.y * yaxis, uv.z * zaxis);
	}
	
// Checker

	vec3 checker(vec3 uv) {
		float xuv = floor(fract(uv.x * (-1.0)) + 0.5);
		float yuv = floor(fract(uv.x) + 0.5);
		float zuv = floor(fract(uv.y) + 0.5);
		float combine = mix(xuv, yuv, zuv);

		return vec3(combine);
	}
	

void vertex() {
// Output:0

}

void fragment() {
// Color:28
	vec3 n_out28p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out28p1 = 1.000000;

// Color:29
	vec3 n_out29p0 = vec3(0.562500, 0.019775, 0.019775);
	float n_out29p1 = 1.000000;

// Input:15
	vec3 n_out15p0 = vec3(UV, 0.0);

// ScalarUniform:10
	float n_out10p0 = Size;

// TileUv:3
	vec3 n_out3p0;
	{
		n_out3p0 = tileUV(vec3(n_out15p0), n_out10p0, n_out10p0, n_out10p0);
	}

// Checker:45
	vec3 n_out45p0;
	{
		n_out45p0 = checker(vec3(n_out3p0));
	}

// VectorMix:30
	vec3 n_out30p0 = mix(n_out28p0, n_out29p0, n_out45p0);

// Output:0
	ALBEDO = n_out30p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1201, -213 )
nodes/fragment/0/position = Vector2( 280, 100 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -20, -20 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -660, 560 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( -1140, -20 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( -900, 60 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( -640, 80 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -880, 640 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -880, -80 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1140, 60 )
nodes/fragment/15/node = SubResource( 15 )
nodes/fragment/15/position = Vector2( -880, 560 )
nodes/fragment/23/node = SubResource( 19 )
nodes/fragment/23/position = Vector2( -220, 80 )
nodes/fragment/28/node = SubResource( 20 )
nodes/fragment/28/position = Vector2( -460, 340 )
nodes/fragment/29/node = SubResource( 21 )
nodes/fragment/29/position = Vector2( -460, 440 )
nodes/fragment/30/node = SubResource( 22 )
nodes/fragment/30/position = Vector2( -260, 400 )
nodes/fragment/45/node = SubResource( 33 )
nodes/fragment/45/position = Vector2( -500, 560 )
nodes/fragment/connections = PoolIntArray( 6, 0, 7, 0, 7, 0, 9, 0, 6, 0, 11, 0, 12, 0, 11, 1, 23, 0, 2, 0, 28, 0, 30, 0, 29, 0, 30, 1, 10, 0, 3, 1, 10, 0, 3, 2, 10, 0, 3, 3, 3, 0, 45, 0, 45, 0, 30, 2, 15, 0, 3, 0, 30, 0, 0, 0 )

[resource]
shader = SubResource( 13 )
shader_param/Size = 3.0
